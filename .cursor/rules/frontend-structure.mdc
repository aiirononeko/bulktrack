---
description: フロントエンドの構造とCloudflare Workers
globs: *.tsx,*.ts
alwaysApply: false
---
# フロントエンド構造

BulkTrackのフロントエンドはReact Router v7 (Framework Mode)をCloudflare Workers上でSSRしています。

## フロントエンドの技術スタック

- React Router v7 (Framework Mode)
- Cloudflare Workers (SSR)
- TypeScript

## ディレクトリ構造

```
apps/
└─ web/                  # フロントエンドアプリケーション
    ├─ src/              # ソースコード
    │   ├─ routes/       # React Router ルート定義
    │   ├─ components/   # Reactコンポーネント
    │   ├─ hooks/        # カスタムフック
    │   └─ utils/        # ユーティリティ関数
    ├─ public/           # 静的ファイル
    └─ wrangler.toml     # Cloudflare Workers設定
```

## React Router v7のファイル構造と作法

### ルートモジュール分割パターン

React Router v7では、関心の分離に基づいて以下のようにファイルを分割することを推奨します

```
/src
  /routes
    /$routeName
      /route.tsx       # メインのルートコンポーネント
      /loader.ts       # データ取得ロジック
      /action.ts       # データ変更ロジック
      /$subRoute/      # ネストされたルート
      /components/     # このルート専用のコンポーネント
      /types.ts        # 型定義
```

### 各ファイルの役割

- **route.tsx**: UIのみに集中し、データ操作ロジックは含めない
  ```tsx
  export { loader } from "./loader";
  export { action } from "./action";
  
  export default function RouteComponent() {
    return <YourComponent />;
  }
  ```

- **loader.ts**: データ取得ロジックを含む
  ```ts
  export async function loader({ context, params }) {
    const env = context.cloudflare.env;
    const baseUrl = env?.API_URL || "http://localhost:5555";
    // APIからデータを取得
    return { data };
  }
  ```

- **action.ts**: データ変更ロジックを含む
  ```ts
  export async function action({ request, params, context }) {
    const formData = await request.formData();
    // APIにデータを送信
    return redirect("/success");
  }
  ```
    - **バリデーション:** フォームデータに対するバリデーションは、ルートディレクトリにコロケーションされた `schema.ts` ファイルに定義した Zod スキーマを使用して行います。`action` 関数内で `schema.safeParse()` を呼び出し、バリデーションエラーがあれば `json({ errors: result.error.flatten().fieldErrors }, { status: 400 })` の形式でエラーオブジェクトを返却します。
    ```typescript
    // routes/$routeName/schema.ts
    import { z } from 'zod';
    export const FormSchema = z.object({ /* ... */ });
    export type FormActionErrors = z.inferFlattenedErrors<typeof FormSchema>['fieldErrors'];

    // routes/$routeName/action.ts
    import { FormSchema } from './schema';
    // ...
    const result = FormSchema.safeParse(formDataObject);
    if (!result.success) {
        return json({ errors: result.error.flatten().fieldErrors }, { status: 400 });
    }
    // バリデーション成功時の処理...
    ```

### データフローパターン

- **データ取得**: `useLoaderData` フックを使用
  ```tsx
  const { data } = useLoaderData();
  ```

- **フォーム送信**: 宣言的には `Form` コンポーネント、命令的には `useSubmit` フックを使用
  ```tsx
  // 宣言的
  <Form method="post">...</Form>
  
  // 命令的
  const submit = useSubmit();
  submit(formData, { method: "post" });
  ```

- **API連携**: Cloudflare環境変数を活用
  ```ts
  const env = context.cloudflare.env;
  const baseUrl = env?.API_URL || "http://localhost:5555";
  ```

## ローカル開発

```
pnpm --filter web dev   # wrangler dev --remote で HMR
```

```
cd apps/web
wrangler deploy
```
