以下のテンプレートは **BulkTrack** リポジトリ（`aiirononeko/bulktrack`）の実コードを調べて作った **“最小で動く `.clinerules`”** です。  
README が古い箇所もありましたが、`package.json`・`go.mod`・`pnpm-workspace.yaml`・デプロイスクリプトを優先して反映しています。citeturn4view0turn6view0turn7view0turn10view0

---

```markdown
# .clinerules – BulkTrack (mono-repo)

## 0. Modes
| Mode | Purpose | Auto-switch Trigger |
|------|---------|---------------------|
| PM        | 要件定義・タスク分割         | `cline plan` 実行時 |
| Architect | 技術設計・依存選定           | Plan 承認後 |
| Code      | 実装・テスト                  | ファイル編集開始 |
| PMO       | Self-Review・CI 対応          | `cline act` 完了 or CI Fail |

## 1. Tech Stack
### Frontend `apps/web`
- React **19** / React Router **7.5.0** (Framework Mode)
- Vite 5 + Cloudflare Workers (Modules)  
- TypeScript 5.7 / Tailwind CSS 4 / shadcn/ui  
- Clerk SDK（@clerk/react-router） for auth
### Backend `apps/api`
- Go **1.24**
- Chi Router / pgx v5 / sqlc v2  
- Fly.io machines deploy  
- Postgres (Neon)  
### Shared
- pnpm Workspaces (`apps/*`, `packages/*`)
- Go Workspace (`go.work`)

## 2. Directory Globs
```yaml
rules:
  - description: "Frontend rules"
    globs: ["apps/web/**"]
  - description: "Backend rules"
    globs: ["apps/api/**"]
  - description: "TS shared packages"
    globs: ["packages/ts-utils/**"]
  - description: "Go shared packages"
    globs: ["packages/go-shared/**"]
```

## 3. Global Guidelines
1. **禁止操作**: `.env*`, `fly.toml`, `wrangler.{toml,jsonc}`, `*.pem` の編集・出力禁止。  
2. **タスク粒度**: 1 タスク ≦ 300 LoC 差分。  
3. **Self-Review 必須** (失敗時は自動修正 2 回まで):  
   - FE `pnpm lint && pnpm typecheck && pnpm cf-typegen && pnpm test`  
   - BE `go vet ./... && golangci-lint run && go test ./...`

## 4. Frontend Rules
- **Loader/Action Pattern** でデータ取得。`useEffect` での fetch は禁止。  
- `pnpm cf-typegen` と `react-router typegen` を `prebuild` で実行し、型不整合が出たらビルド失敗させる。  
- Workers KV/DO を追加したら **`apps/web/wrangler.*` に差分を含める**。  
- Tailwind: UI コンポーネントは shadcn/ui を優先。クラス競合は `tailwind-merge` を使用。

## 5. Backend Rules
- すべての public 関数は `context.Context` を第一引数、エラーは `%w` でラップ。  
- 外部呼び出しは `context.WithTimeout` ≤ 2 s。  
- SQLC 生成後は `go test ./...` でコンパイル確認。  
- デプロイは **`flyctl deploy --remote-only --strategy rolling`**。`scripts/deploy-api.sh` も更新すること。

## 6. Commit Message Convention
```
<type>(<scope>): <subject>

<body>

Self-Review: Lint {lint}% | Test {test}% | Rules {rules}%
Prompt-History: {prompt_history}
```
`type`: feat | fix | docs | style | refactor | test | chore

## 7. PR Template
```
## 変更内容
- ...

## 背景・目的
- ...

## テスト結果
- [ ] FE CI ✔
- [ ] BE CI ✔
```

## 8. CI Gate
- GitHub Actions で FE/BE 並列実行。  
- 失敗したジョブは PMO モードが **patch-only PR** を作成し再実行。

## 9. Rule Evolution
1. タスク完了ごとに PMO が「振り返り & 改善案」を Markdown で出力。  
2. 採用する改善だけを新しい PR で `.clinerules` に追記。  
3. 月次で `.clinerules` → `rules/*.mdc` へ分割する棚卸しを検討。
```

---

### 🏃‍♂️ 運用フロー（Cline 専用）

| Step | Command / Action | Outcome |
|------|------------------|---------|
| 1️⃣  Plan | `cline plan "Add workout-export feature"` | 要件とタスク分割を自動生成 |
| 2️⃣  Review | 仕様確認＆粒度調整 | 手戻り防止 |
| 3️⃣  Act | `cline act` (1 タスクずつ) | 実装 + Self-Review |
| 4️⃣  Commit | Self-Review PASS → コミット (Conventional Commits) | 履歴品質担保 |
| 5️⃣  PR  | PMO が PR をドラフト | 人間レビュー開始 |
| 6️⃣  CI   | GitHub Actions 実行、失敗なら patch-only PR 提案 | 速攻リカバリ |
| 7️⃣  Retro| 振り返り → ルール追記 PR | `.clinerules` を育成 |
