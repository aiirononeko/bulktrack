// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: menus.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createMenu = `-- name: CreateMenu :one
INSERT INTO menus (
  user_id, name, description
) VALUES (
  $1::text, $2, $3
)
RETURNING id, user_id, name, description, created_at
`

type CreateMenuParams struct {
	UserID      string      `json:"user_id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreateMenu(ctx context.Context, arg CreateMenuParams) (Menu, error) {
	row := q.db.QueryRow(ctx, createMenu, arg.UserID, arg.Name, arg.Description)
	var i Menu
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const deleteMenu = `-- name: DeleteMenu :exec
DELETE FROM menus
WHERE id = $1
`

func (q *Queries) DeleteMenu(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteMenu, id)
	return err
}

const getMenu = `-- name: GetMenu :one
SELECT id, user_id, name, description, created_at
FROM menus
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMenu(ctx context.Context, id uuid.UUID) (Menu, error) {
	row := q.db.QueryRow(ctx, getMenu, id)
	var i Menu
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const listMenusByUser = `-- name: ListMenusByUser :many
SELECT id, user_id, name, description, created_at
FROM menus
WHERE user_id = $1::text
ORDER BY created_at DESC
`

func (q *Queries) ListMenusByUser(ctx context.Context, userID string) ([]Menu, error) {
	rows, err := q.db.Query(ctx, listMenusByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Menu{}
	for rows.Next() {
		var i Menu
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMenu = `-- name: UpdateMenu :one
UPDATE menus
SET
  name = $1,
  description = $2
WHERE id = $3
RETURNING id, user_id, name, description, created_at
`

type UpdateMenuParams struct {
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	ID          uuid.UUID   `json:"id"`
}

func (q *Queries) UpdateMenu(ctx context.Context, arg UpdateMenuParams) (Menu, error) {
	row := q.db.QueryRow(ctx, updateMenu, arg.Name, arg.Description, arg.ID)
	var i Menu
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}
