// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: weekly_summaries.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getWeeklySummary = `-- name: GetWeeklySummary :one
SELECT user_id, week, total_volume, est_1rm FROM weekly_summaries
WHERE user_id = $1 AND week = date_trunc('week', $2::date)::date
LIMIT 1
`

type GetWeeklySummaryParams struct {
	UserID  pgtype.UUID `json:"user_id"`
	Column2 pgtype.Date `json:"column_2"`
}

func (q *Queries) GetWeeklySummary(ctx context.Context, arg GetWeeklySummaryParams) (WeeklySummary, error) {
	row := q.db.QueryRow(ctx, getWeeklySummary, arg.UserID, arg.Column2)
	var i WeeklySummary
	err := row.Scan(
		&i.UserID,
		&i.Week,
		&i.TotalVolume,
		&i.Est1rm,
	)
	return i, err
}

const listWeeklySummaries = `-- name: ListWeeklySummaries :many
SELECT user_id, week, total_volume, est_1rm FROM weekly_summaries
WHERE user_id = $1
ORDER BY week DESC
LIMIT $2
`

type ListWeeklySummariesParams struct {
	UserID pgtype.UUID `json:"user_id"`
	Limit  int32       `json:"limit"`
}

func (q *Queries) ListWeeklySummaries(ctx context.Context, arg ListWeeklySummariesParams) ([]WeeklySummary, error) {
	rows, err := q.db.Query(ctx, listWeeklySummaries, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WeeklySummary{}
	for rows.Next() {
		var i WeeklySummary
		if err := rows.Scan(
			&i.UserID,
			&i.Week,
			&i.TotalVolume,
			&i.Est1rm,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const refreshWeeklySummaries = `-- name: RefreshWeeklySummaries :exec
REFRESH MATERIALIZED VIEW weekly_summaries
`

func (q *Queries) RefreshWeeklySummaries(ctx context.Context) error {
	_, err := q.db.Exec(ctx, refreshWeeklySummaries)
	return err
}
