// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: latest_sets.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const listLatestSetsByMenu = `-- name: ListLatestSetsByMenu :many
SELECT DISTINCT ON (mi.exercise_id)
    e.id as exercise_id, 
    e.name as exercise_name,
    s.weight_kg,
    s.reps,
    s.rir,
    s.rpe,
    w.started_at
FROM menu_items mi
JOIN exercises e ON mi.exercise_id = e.id
LEFT JOIN sets s ON s.exercise_id = mi.exercise_id
LEFT JOIN workouts w ON w.id = s.workout_id
WHERE mi.menu_id = $1
  AND w.user_id = $2
ORDER BY mi.exercise_id, w.started_at DESC, s.set_order
`

type ListLatestSetsByMenuParams struct {
	MenuID pgtype.UUID `json:"menu_id"`
	UserID string      `json:"user_id"`
}

type ListLatestSetsByMenuRow struct {
	ExerciseID   uuid.UUID          `json:"exercise_id"`
	ExerciseName string             `json:"exercise_name"`
	WeightKg     pgtype.Numeric     `json:"weight_kg"`
	Reps         pgtype.Int4        `json:"reps"`
	Rir          pgtype.Numeric     `json:"rir"`
	Rpe          pgtype.Numeric     `json:"rpe"`
	StartedAt    pgtype.Timestamptz `json:"started_at"`
}

func (q *Queries) ListLatestSetsByMenu(ctx context.Context, arg ListLatestSetsByMenuParams) ([]ListLatestSetsByMenuRow, error) {
	rows, err := q.db.Query(ctx, listLatestSetsByMenu, arg.MenuID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListLatestSetsByMenuRow{}
	for rows.Next() {
		var i ListLatestSetsByMenuRow
		if err := rows.Scan(
			&i.ExerciseID,
			&i.ExerciseName,
			&i.WeightKg,
			&i.Reps,
			&i.Rir,
			&i.Rpe,
			&i.StartedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
