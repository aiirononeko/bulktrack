// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: menu_items.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createMenuItem = `-- name: CreateMenuItem :one
INSERT INTO menu_items (
  menu_id, exercise_id, set_order, planned_sets, planned_reps, planned_interval_seconds
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, menu_id, exercise_id, set_order, planned_sets, planned_reps, planned_interval_seconds
`

type CreateMenuItemParams struct {
	MenuID                 pgtype.UUID `json:"menu_id"`
	ExerciseID             pgtype.UUID `json:"exercise_id"`
	SetOrder               int32       `json:"set_order"`
	PlannedSets            pgtype.Int4 `json:"planned_sets"`
	PlannedReps            pgtype.Int4 `json:"planned_reps"`
	PlannedIntervalSeconds pgtype.Int4 `json:"planned_interval_seconds"`
}

func (q *Queries) CreateMenuItem(ctx context.Context, arg CreateMenuItemParams) (MenuItem, error) {
	row := q.db.QueryRow(ctx, createMenuItem,
		arg.MenuID,
		arg.ExerciseID,
		arg.SetOrder,
		arg.PlannedSets,
		arg.PlannedReps,
		arg.PlannedIntervalSeconds,
	)
	var i MenuItem
	err := row.Scan(
		&i.ID,
		&i.MenuID,
		&i.ExerciseID,
		&i.SetOrder,
		&i.PlannedSets,
		&i.PlannedReps,
		&i.PlannedIntervalSeconds,
	)
	return i, err
}

const deleteMenuItem = `-- name: DeleteMenuItem :exec
DELETE FROM menu_items
WHERE id = $1
`

func (q *Queries) DeleteMenuItem(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteMenuItem, id)
	return err
}

const getMenuItem = `-- name: GetMenuItem :one
SELECT id, menu_id, exercise_id, set_order, planned_sets, planned_reps, planned_interval_seconds FROM menu_items
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMenuItem(ctx context.Context, id uuid.UUID) (MenuItem, error) {
	row := q.db.QueryRow(ctx, getMenuItem, id)
	var i MenuItem
	err := row.Scan(
		&i.ID,
		&i.MenuID,
		&i.ExerciseID,
		&i.SetOrder,
		&i.PlannedSets,
		&i.PlannedReps,
		&i.PlannedIntervalSeconds,
	)
	return i, err
}

const listMenuItemsByMenu = `-- name: ListMenuItemsByMenu :many
SELECT mi.id, mi.menu_id, mi.exercise_id, e.name as exercise_name, mi.set_order, mi.planned_sets, mi.planned_reps, mi.planned_interval_seconds 
FROM menu_items mi
JOIN exercises e ON mi.exercise_id = e.id
WHERE mi.menu_id = $1
ORDER BY mi.set_order
`

type ListMenuItemsByMenuRow struct {
	ID                     uuid.UUID   `json:"id"`
	MenuID                 pgtype.UUID `json:"menu_id"`
	ExerciseID             pgtype.UUID `json:"exercise_id"`
	ExerciseName           string      `json:"exercise_name"`
	SetOrder               int32       `json:"set_order"`
	PlannedSets            pgtype.Int4 `json:"planned_sets"`
	PlannedReps            pgtype.Int4 `json:"planned_reps"`
	PlannedIntervalSeconds pgtype.Int4 `json:"planned_interval_seconds"`
}

func (q *Queries) ListMenuItemsByMenu(ctx context.Context, menuID pgtype.UUID) ([]ListMenuItemsByMenuRow, error) {
	rows, err := q.db.Query(ctx, listMenuItemsByMenu, menuID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListMenuItemsByMenuRow{}
	for rows.Next() {
		var i ListMenuItemsByMenuRow
		if err := rows.Scan(
			&i.ID,
			&i.MenuID,
			&i.ExerciseID,
			&i.ExerciseName,
			&i.SetOrder,
			&i.PlannedSets,
			&i.PlannedReps,
			&i.PlannedIntervalSeconds,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMenuItem = `-- name: UpdateMenuItem :one
UPDATE menu_items
SET exercise_id = $2, planned_sets = $3, planned_reps = $4, planned_interval_seconds = $5
WHERE id = $1
RETURNING id, menu_id, exercise_id, set_order, planned_sets, planned_reps, planned_interval_seconds
`

type UpdateMenuItemParams struct {
	ID                     uuid.UUID   `json:"id"`
	ExerciseID             pgtype.UUID `json:"exercise_id"`
	PlannedSets            pgtype.Int4 `json:"planned_sets"`
	PlannedReps            pgtype.Int4 `json:"planned_reps"`
	PlannedIntervalSeconds pgtype.Int4 `json:"planned_interval_seconds"`
}

func (q *Queries) UpdateMenuItem(ctx context.Context, arg UpdateMenuItemParams) (MenuItem, error) {
	row := q.db.QueryRow(ctx, updateMenuItem,
		arg.ID,
		arg.ExerciseID,
		arg.PlannedSets,
		arg.PlannedReps,
		arg.PlannedIntervalSeconds,
	)
	var i MenuItem
	err := row.Scan(
		&i.ID,
		&i.MenuID,
		&i.ExerciseID,
		&i.SetOrder,
		&i.PlannedSets,
		&i.PlannedReps,
		&i.PlannedIntervalSeconds,
	)
	return i, err
}
