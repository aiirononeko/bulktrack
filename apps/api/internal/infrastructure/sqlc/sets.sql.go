// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sets.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createSet = `-- name: CreateSet :one
INSERT INTO sets (
  workout_id, exercise, set_order, weight_kg, reps, rpe
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, workout_id, exercise, set_order, weight_kg, reps, rpe
`

type CreateSetParams struct {
	WorkoutID pgtype.UUID    `json:"workout_id"`
	Exercise  string         `json:"exercise"`
	SetOrder  int32          `json:"set_order"`
	WeightKg  pgtype.Numeric `json:"weight_kg"`
	Reps      int32          `json:"reps"`
	Rpe       pgtype.Numeric `json:"rpe"`
}

func (q *Queries) CreateSet(ctx context.Context, arg CreateSetParams) (Set, error) {
	row := q.db.QueryRow(ctx, createSet,
		arg.WorkoutID,
		arg.Exercise,
		arg.SetOrder,
		arg.WeightKg,
		arg.Reps,
		arg.Rpe,
	)
	var i Set
	err := row.Scan(
		&i.ID,
		&i.WorkoutID,
		&i.Exercise,
		&i.SetOrder,
		&i.WeightKg,
		&i.Reps,
		&i.Rpe,
	)
	return i, err
}

const deleteSet = `-- name: DeleteSet :exec
DELETE FROM sets
WHERE id = $1
`

func (q *Queries) DeleteSet(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSet, id)
	return err
}

const getSet = `-- name: GetSet :one
SELECT id, workout_id, exercise, set_order, weight_kg, reps, rpe FROM sets
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSet(ctx context.Context, id uuid.UUID) (Set, error) {
	row := q.db.QueryRow(ctx, getSet, id)
	var i Set
	err := row.Scan(
		&i.ID,
		&i.WorkoutID,
		&i.Exercise,
		&i.SetOrder,
		&i.WeightKg,
		&i.Reps,
		&i.Rpe,
	)
	return i, err
}

const listSetsByWorkout = `-- name: ListSetsByWorkout :many
SELECT id, workout_id, exercise, set_order, weight_kg, reps, rpe FROM sets
WHERE workout_id = $1
ORDER BY set_order
`

func (q *Queries) ListSetsByWorkout(ctx context.Context, workoutID pgtype.UUID) ([]Set, error) {
	rows, err := q.db.Query(ctx, listSetsByWorkout, workoutID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Set{}
	for rows.Next() {
		var i Set
		if err := rows.Scan(
			&i.ID,
			&i.WorkoutID,
			&i.Exercise,
			&i.SetOrder,
			&i.WeightKg,
			&i.Reps,
			&i.Rpe,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSet = `-- name: UpdateSet :one
UPDATE sets
SET weight_kg = $2, reps = $3, rpe = $4
WHERE id = $1
RETURNING id, workout_id, exercise, set_order, weight_kg, reps, rpe
`

type UpdateSetParams struct {
	ID       uuid.UUID      `json:"id"`
	WeightKg pgtype.Numeric `json:"weight_kg"`
	Reps     int32          `json:"reps"`
	Rpe      pgtype.Numeric `json:"rpe"`
}

func (q *Queries) UpdateSet(ctx context.Context, arg UpdateSetParams) (Set, error) {
	row := q.db.QueryRow(ctx, updateSet,
		arg.ID,
		arg.WeightKg,
		arg.Reps,
		arg.Rpe,
	)
	var i Set
	err := row.Scan(
		&i.ID,
		&i.WorkoutID,
		&i.Exercise,
		&i.SetOrder,
		&i.WeightKg,
		&i.Reps,
		&i.Rpe,
	)
	return i, err
}
