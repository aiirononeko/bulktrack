// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: exercises.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createExercise = `-- name: CreateExercise :one
INSERT INTO exercises (
  name, main_target_muscle_group_id, is_custom, created_by_user_id
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, name, main_target_muscle_group_id, is_custom, created_by_user_id, created_at
`

type CreateExerciseParams struct {
	Name                    string      `json:"name"`
	MainTargetMuscleGroupID pgtype.UUID `json:"main_target_muscle_group_id"`
	IsCustom                pgtype.Bool `json:"is_custom"`
	CreatedByUserID         pgtype.UUID `json:"created_by_user_id"`
}

func (q *Queries) CreateExercise(ctx context.Context, arg CreateExerciseParams) (Exercise, error) {
	row := q.db.QueryRow(ctx, createExercise,
		arg.Name,
		arg.MainTargetMuscleGroupID,
		arg.IsCustom,
		arg.CreatedByUserID,
	)
	var i Exercise
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MainTargetMuscleGroupID,
		&i.IsCustom,
		&i.CreatedByUserID,
		&i.CreatedAt,
	)
	return i, err
}

const getExercise = `-- name: GetExercise :one
SELECT id, name, main_target_muscle_group_id, is_custom, created_by_user_id, created_at FROM exercises
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetExercise(ctx context.Context, id uuid.UUID) (Exercise, error) {
	row := q.db.QueryRow(ctx, getExercise, id)
	var i Exercise
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MainTargetMuscleGroupID,
		&i.IsCustom,
		&i.CreatedByUserID,
		&i.CreatedAt,
	)
	return i, err
}

const listExercises = `-- name: ListExercises :many
SELECT id, name FROM exercises
WHERE is_custom = false -- 基本的な種目のみリストアップ (カスタムは除く)
ORDER BY name
`

type ListExercisesRow struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) ListExercises(ctx context.Context) ([]ListExercisesRow, error) {
	rows, err := q.db.Query(ctx, listExercises)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListExercisesRow{}
	for rows.Next() {
		var i ListExercisesRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
